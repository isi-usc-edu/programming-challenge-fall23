{"id":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","dependencies":[{"name":"C:\\Users\\jimit\\Desktop\\ReadStop\\package.json","includedInParent":true,"mtime":1695411147775},{"name":"C:\\Users\\jimit\\Desktop\\ReadStop\\node_modules\\unicode-properties\\node_modules\\unicode-trie\\package.json","includedInParent":true,"mtime":1695411146408},{"name":"tiny-inflate","loc":{"line":1,"column":24,"index":24},"parent":"C:\\Users\\jimit\\Desktop\\ReadStop\\node_modules\\unicode-properties\\node_modules\\unicode-trie\\index.js","resolved":"C:\\Users\\jimit\\Desktop\\ReadStop\\node_modules\\tiny-inflate\\index.js"},{"name":"./swap","loc":{"line":2,"column":29,"index":70},"parent":"C:\\Users\\jimit\\Desktop\\ReadStop\\node_modules\\unicode-properties\\node_modules\\unicode-trie\\index.js","resolved":"C:\\Users\\jimit\\Desktop\\ReadStop\\node_modules\\unicode-properties\\node_modules\\unicode-trie\\swap.js"}],"generated":{"js":"const inflate = require('tiny-inflate');\nconst { swap32LE } = require('./swap');\n\n// Shift size for getting the index-1 table offset.\nconst SHIFT_1 = 6 + 5;\n\n// Shift size for getting the index-2 table offset.\nconst SHIFT_2 = 5;\n\n// Difference between the two shift sizes,\n// for getting an index-1 offset from an index-2 offset. 6=11-5\nconst SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n\n// Number of index-1 entries for the BMP. 32=0x20\n// This part of the index-1 table is omitted from the serialized form.\nconst OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\n\n// Number of entries in an index-2 block. 64=0x40\nconst INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n\n// Mask for getting the lower bits for the in-index-2-block offset. */\nconst INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n\n// Shift size for shifting left the index array values.\n// Increases possible data size with 16-bit index values at the cost\n// of compactability.\n// This requires data blocks to be aligned by DATA_GRANULARITY.\nconst INDEX_SHIFT = 2;\n\n// Number of entries in a data block. 32=0x20\nconst DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n\n// Mask for getting the lower bits for the in-data-block offset.\nconst DATA_MASK = DATA_BLOCK_LENGTH - 1;\n\n// The part of the index-2 table for U+D800..U+DBFF stores values for\n// lead surrogate code _units_ not code _points_.\n// Values for lead surrogate code _points_ are indexed with this portion of the table.\n// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\nconst LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\nconst LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\n\n// Count the lengths of both BMP pieces. 2080=0x820\nconst INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n\n// The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.\nconst UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\nconst UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;  // U+0800 is the first code point after 2-byte UTF-8\n\n// The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n// Variable length, for code points up to highStart, where the last single-value range starts.\n// Maximum length 512=0x200=0x100000>>SHIFT_1.\n// (For 0x100000 supplementary code points U+10000..U+10ffff.)\n//\n// The part of the index-2 table for supplementary code points starts\n// after this index-1 table.\n//\n// Both the index-1 table and the following part of the index-2 table\n// are omitted completely if there is only BMP data.\nconst INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n\n// The alignment size of a data block. Also the granularity for compaction.\nconst DATA_GRANULARITY = 1 << INDEX_SHIFT;\n\nclass UnicodeTrie {\n  constructor(data) {\n    const isBuffer = (typeof data.readUInt32BE === 'function') && (typeof data.slice === 'function');\n\n    if (isBuffer || data instanceof Uint8Array) {\n      // read binary format\n      let uncompressedLength;\n      if (isBuffer) {\n        this.highStart = data.readUInt32LE(0);\n        this.errorValue = data.readUInt32LE(4);\n        uncompressedLength = data.readUInt32LE(8);\n        data = data.slice(12);\n      } else {\n        const view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0, true);\n        this.errorValue = view.getUint32(4, true);\n        uncompressedLength = view.getUint32(8, true);\n        data = data.subarray(12);\n      }\n\n      // double inflate the actual trie data\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      data = inflate(data, new Uint8Array(uncompressedLength));\n\n      // swap bytes from little-endian\n      swap32LE(data);\n\n      this.data = new Uint32Array(data.buffer);\n\n    } else {\n      // pre-parsed data\n      ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);\n    }\n  }\n\n  get(codePoint) {\n    let index;\n    if ((codePoint < 0) || (codePoint > 0x10ffff)) {\n      return this.errorValue;\n    }\n\n    if ((codePoint < 0xd800) || ((codePoint > 0xdbff) && (codePoint <= 0xffff))) {\n      // Ordinary BMP code point, excluding leading surrogates.\n      // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\n      // data is stored in the index array itself.\n      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint <= 0xffff) {\n      // Lead Surrogate Code Point.  A Separate index section is stored for\n      // lead surrogate code units and code points.\n      //   The main index has the code unit data.\n      //   For this function, we need the code point data.\n      index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint < this.highStart) {\n      // Supplemental code point, use two-level lookup.\n      index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];\n      index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];\n      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    return this.data[this.data.length - DATA_GRANULARITY];\n  }\n}\n\nmodule.exports = UnicodeTrie;"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}}],"sources":{"../../node_modules/unicode-properties/node_modules/unicode-trie/index.js":"const inflate = require('tiny-inflate');\nconst { swap32LE } = require('./swap');\n\n// Shift size for getting the index-1 table offset.\nconst SHIFT_1 = 6 + 5;\n\n// Shift size for getting the index-2 table offset.\nconst SHIFT_2 = 5;\n\n// Difference between the two shift sizes,\n// for getting an index-1 offset from an index-2 offset. 6=11-5\nconst SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n\n// Number of index-1 entries for the BMP. 32=0x20\n// This part of the index-1 table is omitted from the serialized form.\nconst OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\n\n// Number of entries in an index-2 block. 64=0x40\nconst INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n\n// Mask for getting the lower bits for the in-index-2-block offset. */\nconst INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n\n// Shift size for shifting left the index array values.\n// Increases possible data size with 16-bit index values at the cost\n// of compactability.\n// This requires data blocks to be aligned by DATA_GRANULARITY.\nconst INDEX_SHIFT = 2;\n\n// Number of entries in a data block. 32=0x20\nconst DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n\n// Mask for getting the lower bits for the in-data-block offset.\nconst DATA_MASK = DATA_BLOCK_LENGTH - 1;\n\n// The part of the index-2 table for U+D800..U+DBFF stores values for\n// lead surrogate code _units_ not code _points_.\n// Values for lead surrogate code _points_ are indexed with this portion of the table.\n// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\nconst LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\nconst LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\n\n// Count the lengths of both BMP pieces. 2080=0x820\nconst INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n\n// The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.\nconst UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\nconst UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;  // U+0800 is the first code point after 2-byte UTF-8\n\n// The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n// Variable length, for code points up to highStart, where the last single-value range starts.\n// Maximum length 512=0x200=0x100000>>SHIFT_1.\n// (For 0x100000 supplementary code points U+10000..U+10ffff.)\n//\n// The part of the index-2 table for supplementary code points starts\n// after this index-1 table.\n//\n// Both the index-1 table and the following part of the index-2 table\n// are omitted completely if there is only BMP data.\nconst INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n\n// The alignment size of a data block. Also the granularity for compaction.\nconst DATA_GRANULARITY = 1 << INDEX_SHIFT;\n\nclass UnicodeTrie {\n  constructor(data) {\n    const isBuffer = (typeof data.readUInt32BE === 'function') && (typeof data.slice === 'function');\n\n    if (isBuffer || data instanceof Uint8Array) {\n      // read binary format\n      let uncompressedLength;\n      if (isBuffer) {\n        this.highStart = data.readUInt32LE(0);\n        this.errorValue = data.readUInt32LE(4);\n        uncompressedLength = data.readUInt32LE(8);\n        data = data.slice(12);\n      } else {\n        const view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0, true);\n        this.errorValue = view.getUint32(4, true);\n        uncompressedLength = view.getUint32(8, true);\n        data = data.subarray(12);\n      }\n\n      // double inflate the actual trie data\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      data = inflate(data, new Uint8Array(uncompressedLength));\n\n      // swap bytes from little-endian\n      swap32LE(data);\n\n      this.data = new Uint32Array(data.buffer);\n\n    } else {\n      // pre-parsed data\n      ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);\n    }\n  }\n\n  get(codePoint) {\n    let index;\n    if ((codePoint < 0) || (codePoint > 0x10ffff)) {\n      return this.errorValue;\n    }\n\n    if ((codePoint < 0xd800) || ((codePoint > 0xdbff) && (codePoint <= 0xffff))) {\n      // Ordinary BMP code point, excluding leading surrogates.\n      // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\n      // data is stored in the index array itself.\n      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint <= 0xffff) {\n      // Lead Surrogate Code Point.  A Separate index section is stored for\n      // lead surrogate code units and code points.\n      //   The main index has the code unit data.\n      //   For this function, we need the code point data.\n      index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint < this.highStart) {\n      // Supplemental code point, use two-level lookup.\n      index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];\n      index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];\n      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    return this.data[this.data.length - DATA_GRANULARITY];\n  }\n}\n\nmodule.exports = UnicodeTrie;"},"lineCount":136}},"error":null,"hash":"76e9fd9a6075abf634a5b5726834e9e2","cacheData":{"env":{}}}